var root=document.getElementById("roadMap");function genRoadMap(){getFile(root.dataset.roadmap,function(response){root.innerHTML=createRoadMapHTML(nodeTree(JSON.parse(response)));var nodeElems=document.querySelectorAll(".roadNode");var maxHeight=0;for(var i in nodeElems){if(maxHeight<nodeElems[i].offsetHeight)maxHeight=nodeElems[i].offsetHeight}
nodeElems.forEach(function(elem){elem.style.height=maxHeight+"px";elem.addEventListener("mouseover",function(current){var deps=elem.querySelectorAll(".dep");deps.forEach(function(el){document.getElementById(sanitize(el.innerText)).classList.add("glow")})});elem.addEventListener("mouseout",function(current){var deps=elem.querySelectorAll(".dep");deps.forEach(function(el){document.getElementById(sanitize(el.innerText)).classList.remove("glow")})})})})}
function getFile(filename,callback){var xobj=new XMLHttpRequest();xobj.overrideMimeType("application/json");xobj.open('GET',filename,!0);xobj.onreadystatechange=function(){if(xobj.readyState==4&&xobj.status=="200"){callback(xobj.responseText)}};xobj.send(null)}
function nodeTree(json){var nodeList=[];var rootNodes=[];var p=0;for(var i in json){if(json[i].dependencies==null){rootNodes.push(json[i]);json.splice(i,1)}}
nodeList.push(rootNodes);while(json.length>0){if(p==json.length)p=0;var check=checkListForAllDeps(json[p].dependencies,nodeList);if(check[0]){if(nodeList.length<check[1])nodeList.push([]);nodeList[check[1]-1].push(json[p]);json.splice(p,1)}
else p++}return nodeList} function checkListForAllDeps(deps,nodes){var allInList=[];var max=0;for(var i in deps)allInList.push(-1);for(var i in deps){for(var j in nodes){for(var k in nodes[j]){if(deps[i]===nodes[j][k].title){allInList[i]=1;if(j>max)max=j;break}}}}
return[allInList.every(moreThanZero),parseInt(max)+2]} function moreThanZero(currentValue){return currentValue>0}
function createNodeHTMLObject(nodeObj){var result="";result+="<div id='"+sanitize(nodeObj.title)+"' class='roadnode'><div style='display:table-cell'><h3>"+nodeObj.title+"</h3><p>"+nodeObj.description+"<br/>";for(var j in nodeObj.dependencies){result+="Task depends on : <span class='dep'>"+nodeObj.dependencies[j]+"</span><br/>"}result+="</p><br/><status>"+nodeObj.status+"</status></div></div>";return result}
function createRoadMapHTML(nodeList){var res="";for(var i in nodeList){var currentRow=nodeList[i];res+="<div class='roadRow'>";for(var j in currentRow){res+=createNodeHTMLObject(currentRow[j])}res+="</div>"}return res}
function sanitize(str){return str.replace(" ","")}
